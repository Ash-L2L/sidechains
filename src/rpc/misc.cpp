// Copyright (c) 2010 Satoshi Nakamoto
// Copyright (c) 2009-2017 The Bitcoin Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <base58.h>
#include <bmmcache.h>
#include <chain.h>
#include <clientversion.h>
#include <core_io.h>
#include <crypto/ripemd160.h>
#include <init.h>
#include <validation.h>
#include <httpserver.h>
#include <net.h>
#include <netbase.h>
#include <rpc/blockchain.h>
#include <rpc/server.h>
#include <rpc/util.h>
#include <sidechain.h>
#include <sidechainclient.h>
#include <timedata.h>
#include <txdb.h>
#include <util.h>
#include <utilstrencodings.h>
#ifdef ENABLE_WALLET
#include <wallet/rpcwallet.h>
#include <wallet/wallet.h>
#include <wallet/walletdb.h>
#endif
#include <warnings.h>

#include <stdint.h>
#ifdef HAVE_MALLOC_INFO
#include <malloc.h>
#endif

#include <ares.h>
#include <boost/algorithm/string.hpp>
#include <univalue.h>

UniValue validateaddress(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() != 1)
        throw std::runtime_error(
            "validateaddress \"address\"\n"
            "\nReturn information about the given bitcoin address.\n"
            "DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\n"
            "transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\n"
            "fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\n"
            "script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\n"
            "\nArguments:\n"
            "1. \"address\"                    (string, required) The bitcoin address to validate\n"
            "\nResult:\n"
            "{\n"
            "  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\n"
            "  \"address\" : \"address\",        (string) The bitcoin address validated\n"
            "  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address\n"
            "  \"isscript\" : true|false,      (boolean) If the key is a script\n"
            "  \"iswitness\" : true|false,     (boolean) If the address is a witness address\n"
            "  \"witness_version\" : version   (numeric, optional) The version number of the witness program\n"
            "  \"witness_program\" : \"hex\"     (string, optional) The hex value of the witness program\n"
            "}\n"
            "\nExamples:\n"
            + HelpExampleCli("validateaddress", "\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"")
            + HelpExampleRpc("validateaddress", "\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"")
        );

    CTxDestination dest = DecodeDestination(request.params[0].get_str());
    bool isValid = IsValidDestination(dest);

    UniValue ret(UniValue::VOBJ);
    ret.pushKV("isvalid", isValid);
    if (isValid)
    {

#ifdef ENABLE_WALLET
        if (!::vpwallets.empty() && IsDeprecatedRPCEnabled("validateaddress")) {
            ret.pushKVs(getaddressinfo(request));
        }
#endif
        if (ret["address"].isNull()) {
            std::string currentAddress = EncodeDestination(dest);
            ret.pushKV("address", currentAddress);

            CScript scriptPubKey = GetScriptForDestination(dest);
            ret.pushKV("scriptPubKey", HexStr(scriptPubKey.begin(), scriptPubKey.end()));;

            UniValue detail = DescribeAddress(dest);
            ret.pushKVs(detail);
        }
    }
    return ret;
}

// Needed even with !ENABLE_WALLET, to pass (ignored) pointers around
class CWallet;

UniValue createmultisig(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)
    {
        std::string msg = "createmultisig nrequired [\"key\",...]\n"
            "\nCreates a multi-signature address with n signature of m keys required.\n"
            "It returns a json object with the address and redeemScript.\n"
            "\nArguments:\n"
            "1. nrequired                    (numeric, required) The number of required signatures out of the n keys.\n"
            "2. \"keys\"                       (string, required) A json array of hex-encoded public keys\n"
            "     [\n"
            "       \"key\"                    (string) The hex-encoded public key\n"
            "       ,...\n"
            "     ]\n"

            "\nResult:\n"
            "{\n"
            "  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.\n"
            "  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.\n"
            "}\n"

            "\nExamples:\n"
            "\nCreate a multisig address from 2 public keys\n"
            + HelpExampleCli("createmultisig", "2 \"[\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\",\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\"]\"") +
            "\nAs a json rpc call\n"
            + HelpExampleRpc("createmultisig", "2, \"[\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\",\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\"]\"")
        ;
        throw std::runtime_error(msg);
    }

    int required = request.params[0].get_int();

    // Get the public keys
    const UniValue& keys = request.params[1].get_array();
    std::vector<CPubKey> pubkeys;
    for (unsigned int i = 0; i < keys.size(); ++i) {
        if (IsHex(keys[i].get_str()) && (keys[i].get_str().length() == 66 || keys[i].get_str().length() == 130)) {
            pubkeys.push_back(HexToPubKey(keys[i].get_str()));
        } else {
            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf("Invalid public key: %s\nNote that from v0.16, createmultisig no longer accepts addresses."
            " Users must use addmultisigaddress to create multisig addresses with addresses known to the wallet.", keys[i].get_str()));
        }
    }

    // Construct using pay-to-script-hash:
    CScript inner = CreateMultisigRedeemscript(required, pubkeys);
    CScriptID innerID(inner);

    UniValue result(UniValue::VOBJ);
    result.pushKV("address", EncodeDestination(innerID));
    result.pushKV("redeemScript", HexStr(inner.begin(), inner.end()));

    return result;
}

UniValue verifymessage(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() != 3)
        throw std::runtime_error(
            "verifymessage \"address\" \"signature\" \"message\"\n"
            "\nVerify a signed message\n"
            "\nArguments:\n"
            "1. \"address\"         (string, required) The bitcoin address to use for the signature.\n"
            "2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\n"
            "3. \"message\"         (string, required) The message that was signed.\n"
            "\nResult:\n"
            "true|false   (boolean) If the signature is verified or not.\n"
            "\nExamples:\n"
            "\nUnlock the wallet for 30 seconds\n"
            + HelpExampleCli("walletpassphrase", "\"mypassphrase\" 30") +
            "\nCreate the signature\n"
            + HelpExampleCli("signmessage", "\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"") +
            "\nVerify the signature\n"
            + HelpExampleCli("verifymessage", "\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"") +
            "\nAs json rpc\n"
            + HelpExampleRpc("verifymessage", "\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"")
        );

    LOCK(cs_main);

    std::string strAddress  = request.params[0].get_str();
    std::string strSign     = request.params[1].get_str();
    std::string strMessage  = request.params[2].get_str();

    CTxDestination destination = DecodeDestination(strAddress);
    if (!IsValidDestination(destination)) {
        throw JSONRPCError(RPC_TYPE_ERROR, "Invalid address");
    }

    const CKeyID *keyID = boost::get<CKeyID>(&destination);
    if (!keyID) {
        throw JSONRPCError(RPC_TYPE_ERROR, "Address does not refer to key");
    }

    bool fInvalid = false;
    std::vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);

    if (fInvalid)
        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, "Malformed base64 encoding");

    CHashWriter ss(SER_GETHASH, 0);
    ss << strMessageMagic;
    ss << strMessage;

    CPubKey pubkey;
    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))
        return false;

    return (pubkey.GetID() == *keyID);
}

UniValue signmessagewithprivkey(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() != 2)
        throw std::runtime_error(
            "signmessagewithprivkey \"privkey\" \"message\"\n"
            "\nSign a message with the private key of an address\n"
            "\nArguments:\n"
            "1. \"privkey\"         (string, required) The private key to sign the message with.\n"
            "2. \"message\"         (string, required) The message to create a signature of.\n"
            "\nResult:\n"
            "\"signature\"          (string) The signature of the message encoded in base 64\n"
            "\nExamples:\n"
            "\nCreate the signature\n"
            + HelpExampleCli("signmessagewithprivkey", "\"privkey\" \"my message\"") +
            "\nVerify the signature\n"
            + HelpExampleCli("verifymessage", "\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"") +
            "\nAs json rpc\n"
            + HelpExampleRpc("signmessagewithprivkey", "\"privkey\", \"my message\"")
        );

    std::string strPrivkey = request.params[0].get_str();
    std::string strMessage = request.params[1].get_str();

    CBitcoinSecret vchSecret;
    bool fGood = vchSecret.SetString(strPrivkey);
    if (!fGood)
        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, "Invalid private key");
    CKey key = vchSecret.GetKey();
    if (!key.IsValid())
        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, "Private key outside allowed range");

    CHashWriter ss(SER_GETHASH, 0);
    ss << strMessageMagic;
    ss << strMessage;

    std::vector<unsigned char> vchSig;
    if (!key.SignCompact(ss.GetHash(), vchSig))
        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, "Sign failed");

    return EncodeBase64(vchSig.data(), vchSig.size());
}

UniValue setmocktime(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() != 1)
        throw std::runtime_error(
            "setmocktime timestamp\n"
            "\nSet the local time to given timestamp (-regtest only)\n"
            "\nArguments:\n"
            "1. timestamp  (integer, required) Unix seconds-since-epoch timestamp\n"
            "   Pass 0 to go back to using the system time."
        );

    if (!Params().MineBlocksOnDemand())
        throw std::runtime_error("setmocktime for regression testing (-regtest mode) only");

    // For now, don't change mocktime if we're in the middle of validation, as
    // this could have an effect on mempool time-based eviction, as well as
    // IsCurrentForFeeEstimation() and IsInitialBlockDownload().
    // TODO: figure out the right way to synchronize around mocktime, and
    // ensure all call sites of GetTime() are accessing this safely.
    LOCK(cs_main);

    RPCTypeCheck(request.params, {UniValue::VNUM});
    SetMockTime(request.params[0].get_int64());

    return NullUniValue;
}

static UniValue RPCLockedMemoryInfo()
{
    LockedPool::Stats stats = LockedPoolManager::Instance().stats();
    UniValue obj(UniValue::VOBJ);
    obj.pushKV("used", uint64_t(stats.used));
    obj.pushKV("free", uint64_t(stats.free));
    obj.pushKV("total", uint64_t(stats.total));
    obj.pushKV("locked", uint64_t(stats.locked));
    obj.pushKV("chunks_used", uint64_t(stats.chunks_used));
    obj.pushKV("chunks_free", uint64_t(stats.chunks_free));
    return obj;
}

#ifdef HAVE_MALLOC_INFO
static std::string RPCMallocInfo()
{
    char *ptr = nullptr;
    size_t size = 0;
    FILE *f = open_memstream(&ptr, &size);
    if (f) {
        malloc_info(0, f);
        fclose(f);
        if (ptr) {
            std::string rv(ptr, size);
            free(ptr);
            return rv;
        }
    }
    return "";
}
#endif

UniValue getmemoryinfo(const JSONRPCRequest& request)
{
    /* Please, avoid using the word "pool" here in the RPC interface or help,
     * as users will undoubtedly confuse it with the other "memory pool"
     */
    if (request.fHelp || request.params.size() > 1)
        throw std::runtime_error(
            "getmemoryinfo (\"mode\")\n"
            "Returns an object containing information about memory usage.\n"
            "Arguments:\n"
            "1. \"mode\" determines what kind of information is returned. This argument is optional, the default mode is \"stats\".\n"
            "  - \"stats\" returns general statistics about memory usage in the daemon.\n"
            "  - \"mallocinfo\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\n"
            "\nResult (mode \"stats\"):\n"
            "{\n"
            "  \"locked\": {               (json object) Information about locked memory manager\n"
            "    \"used\": xxxxx,          (numeric) Number of bytes used\n"
            "    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas\n"
            "    \"total\": xxxxxxx,       (numeric) Total number of bytes managed\n"
            "    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\n"
            "    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks\n"
            "    \"chunks_free\": xxxxx,   (numeric) Number unused chunks\n"
            "  }\n"
            "}\n"
            "\nResult (mode \"mallocinfo\"):\n"
            "\"<malloc version=\"1\">...\"\n"
            "\nExamples:\n"
            + HelpExampleCli("getmemoryinfo", "")
            + HelpExampleRpc("getmemoryinfo", "")
        );

    std::string mode = request.params[0].isNull() ? "stats" : request.params[0].get_str();
    if (mode == "stats") {
        UniValue obj(UniValue::VOBJ);
        obj.pushKV("locked", RPCLockedMemoryInfo());
        return obj;
    } else if (mode == "mallocinfo") {
#ifdef HAVE_MALLOC_INFO
        return RPCMallocInfo();
#else
        throw JSONRPCError(RPC_INVALID_PARAMETER, "mallocinfo is only available when compiled with glibc 2.10+");
#endif
    } else {
        throw JSONRPCError(RPC_INVALID_PARAMETER, "unknown mode " + mode);
    }
}

uint32_t getCategoryMask(UniValue cats) {
    cats = cats.get_array();
    uint32_t mask = 0;
    for (unsigned int i = 0; i < cats.size(); ++i) {
        uint32_t flag = 0;
        std::string cat = cats[i].get_str();
        if (!GetLogCategory(&flag, &cat)) {
            throw JSONRPCError(RPC_INVALID_PARAMETER, "unknown logging category " + cat);
        }
        if (flag == BCLog::NONE) {
            return 0;
        }
        mask |= flag;
    }
    return mask;
}

UniValue logging(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() > 2) {
        throw std::runtime_error(
            "logging ( <include> <exclude> )\n"
            "Gets and sets the logging configuration.\n"
            "When called without an argument, returns the list of categories with status that are currently being debug logged or not.\n"
            "When called with arguments, adds or removes categories from debug logging and return the lists above.\n"
            "The arguments are evaluated in order \"include\", \"exclude\".\n"
            "If an item is both included and excluded, it will thus end up being excluded.\n"
            "The valid logging categories are: " + ListLogCategories() + "\n"
            "In addition, the following are available as category names with special meanings:\n"
            "  - \"all\",  \"1\" : represent all logging categories.\n"
            "  - \"none\", \"0\" : even if other logging categories are specified, ignore all of them.\n"
            "\nArguments:\n"
            "1. \"include\"        (array of strings, optional) A json array of categories to add debug logging\n"
            "     [\n"
            "       \"category\"   (string) the valid logging category\n"
            "       ,...\n"
            "     ]\n"
            "2. \"exclude\"        (array of strings, optional) A json array of categories to remove debug logging\n"
            "     [\n"
            "       \"category\"   (string) the valid logging category\n"
            "       ,...\n"
            "     ]\n"
            "\nResult:\n"
            "{                   (json object where keys are the logging categories, and values indicates its status\n"
            "  \"category\": 0|1,  (numeric) if being debug logged or not. 0:inactive, 1:active\n"
            "  ...\n"
            "}\n"
            "\nExamples:\n"
            + HelpExampleCli("logging", "\"[\\\"all\\\"]\" \"[\\\"http\\\"]\"")
            + HelpExampleRpc("logging", "[\"all\"], \"[libevent]\"")
        );
    }

    uint32_t originalLogCategories = logCategories;
    if (request.params[0].isArray()) {
        logCategories |= getCategoryMask(request.params[0]);
    }

    if (request.params[1].isArray()) {
        logCategories &= ~getCategoryMask(request.params[1]);
    }

    // Update libevent logging if BCLog::LIBEVENT has changed.
    // If the library version doesn't allow it, UpdateHTTPServerLogging() returns false,
    // in which case we should clear the BCLog::LIBEVENT flag.
    // Throw an error if the user has explicitly asked to change only the libevent
    // flag and it failed.
    uint32_t changedLogCategories = originalLogCategories ^ logCategories;
    if (changedLogCategories & BCLog::LIBEVENT) {
        if (!UpdateHTTPServerLogging(logCategories & BCLog::LIBEVENT)) {
            logCategories &= ~BCLog::LIBEVENT;
            if (changedLogCategories == BCLog::LIBEVENT) {
            throw JSONRPCError(RPC_INVALID_PARAMETER, "libevent logging cannot be updated when using libevent before v2.1.1.");
            }
        }
    }

    UniValue result(UniValue::VOBJ);
    std::vector<CLogCategoryActive> vLogCatActive = ListActiveLogCategories();
    for (const auto& logCatActive : vLogCatActive) {
        result.pushKV(logCatActive.category, logCatActive.active);
    }

    return result;
}

UniValue echo(const JSONRPCRequest& request)
{
    if (request.fHelp)
        throw std::runtime_error(
            "echo|echojson \"message\" ...\n"
            "\nSimply echo back the input arguments. This command is for testing.\n"
            "\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in"
            "bitnames-cli and the GUI. There is no server-side difference."
        );

    return request.params;
}

static UniValue getinfo_deprecated(const JSONRPCRequest& request)
{
    throw JSONRPCError(RPC_METHOD_NOT_FOUND,
        "getinfo\n"
        "\nThis call was removed in version 0.16.0. Use the appropriate fields from:\n"
        "- getblockchaininfo: blocks, difficulty, chain\n"
        "- getnetworkinfo: version, protocolversion, timeoffset, connections, proxy, relayfee, warnings\n"
        "- getwalletinfo: balance, keypoololdest, keypoolsize, paytxfee, unlocked_until, walletversion\n"
        "\nbitnames-cli has the option -getinfo to collect and format these in the old format."
    );
}

UniValue refreshbmm(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)
        throw std::runtime_error(
            "refreshbmm\n"
            "\nRefresh automated BMM. Basic testing implementation\n"
            "\nArguments:\n"
            "1. \"amount\"                (numeric) Amount to pay mainchain miner for including BMM request (required)\n"
            "2. \"createnew\" true|false  (bool) Create a new BMM block if possible\n (optional, default: true)\n"
            "3. \"prevblock\"             (string) Hash of sidechain block to build on (optional, default: chaintip)\n"
            "\nResult:\n"
            "hash_last_main_block  (string) Hash of mainchain tip.\n"
            "bmm_block_created     (string) Hash of new BMM block created.\n"
            "bmm_block_submitted   (string) Hash of BMM block connected to sidechain.\n"
            "ntxn                  (number) Number of txn in new BMM request (if created).\n"
            "nfees                 (number) Total fees in new block (if created).\n"
            "txid                  (string) Mainchain BMM request TXID.\n"
            "error                 (string) Output from sidechain client.\n"
        );

    bool fReorg = false;
    std::vector<uint256> vDisconnected;
    if (!UpdateMainBlockHashCache(fReorg, vDisconnected))
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to update mainchain block cache!");

    if (fReorg)
        HandleMainchainReorg(vDisconnected);

    CAmount amount = AmountFromValue(request.params[0]);
    if (amount <= 0)
        throw JSONRPCError(RPC_TYPE_ERROR, "Invalid amount for BMM!");

    // Whether or not to create a new BMM block / request if possible. If set
    // false, we will only check for BMM commits in the mainchain and try to
    // connect those blocks but not generate a new BMM block and request.
    bool fCreateNew = request.params.size() >= 2 ? request.params[1].get_bool() : true;

    // If hashPrevBlock is set, we will build a block on top of that block
    // instead of the current sidechain tip.
    uint256 hashPrevBlock;
    if (request.params.size() == 3) {
        LOCK(cs_main);

        hashPrevBlock = uint256S(request.params[2].get_str());
        if (hashPrevBlock.IsNull())
            throw JSONRPCError(RPC_MISC_ERROR, "Invalid prev block hash (null)!");

        // Check if the prevblock is in the side: chain
        if (mapBlockIndex.count(hashPrevBlock) == 0)
            throw JSONRPCError(RPC_MISC_ERROR, "Prev block does not exist!");
    }

    if (!CheckMainchainConnection())
        throw JSONRPCError(RPC_MISC_ERROR, "Must be connected to mainchain (not connected)!");

    SetNetworkActive(true, "refreshbmm RPC command issued");

    SidechainClient client;
    std::string strError = "";
    uint256 hashCreated;
    uint256 hashConnected;
    uint256 hashConnectedBlind;
    uint256 txid;
    int ntxn = 0;
    CAmount nFees = 0;
    if (!client.RefreshBMM(amount, strError, hashCreated, hashConnected, hashConnectedBlind, txid, ntxn, nFees, fCreateNew, hashPrevBlock))
        throw JSONRPCError(RPC_MISC_ERROR, strError);

    UniValue result(UniValue::VOBJ);
    result.pushKV("hash_last_main_block", bmmCache.GetLastMainBlockHash().ToString());
    result.pushKV("bmm_block_created", hashCreated.ToString());
    result.pushKV("bmm_block_submitted", hashConnected.ToString());
    result.pushKV("bmm_block_submitted_blind", hashConnectedBlind.ToString());
    result.pushKV("ntxn", ntxn);
    result.pushKV("nfees", nFees);
    result.pushKV("txid", txid.ToString());
    result.pushKV("error", strError);

    return result;
}

UniValue getaveragemainchainfees(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() != 2)
        throw std::runtime_error(
            "getaveragemainchainfees\n"
            "\nArguments:\n"
            "1. \"numblocks (numeric, required) the number of blocks to scan\"\n"
            "2. \"startheight (numeric, required) the block height to start scanning at\"\n"
            "\nGet the average transaction fees from the mainchain\n"
            "\nResult:\n"
            "averagefees  (numeric) x.xx\n"
        );

    int nBlocks = request.params[0].get_int();
    int nStartHeight = request.params[1].get_int();

    SidechainClient client;
    CAmount nAverageFees = 0;
    if (!client.GetAverageFees(nBlocks, nStartHeight, nAverageFees))
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to request fee average!");

    UniValue result(UniValue::VOBJ);
    result.pushKV("fees", ValueFromAmount(nAverageFees));

    return result;
}

UniValue getmainchainblockcount(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size())
        throw std::runtime_error(
            "getmainchainblockcount\n"
            "\nArguments: none\n"
            "\nGet the mainchain block count\n"
            "\nResult:\n"
            "blockcount  (numeric) x\n"
        );

    SidechainClient client;
    int nBlocks = 0;
    if (!client.GetBlockCount(nBlocks))
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to request mainchain height!");

    UniValue result(UniValue::VOBJ);
    result.pushKV("blockcount", nBlocks);

    return result;
}

UniValue getmainchainblockhash(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() != 1)
        throw std::runtime_error(
            "getmainchainblockhash\n"
            "\nArguments:\n"
            "1. \"height (numeric, required) the mainchain block height\"\n"
            "\nGet the mainchain block hash\n"
            "\nResult:\n"
            "hashblock  (string)\n"
        );

    int nHeight = request.params[0].get_int();

    SidechainClient client;
    uint256 hashBlock;
    if (!client.GetBlockHash(nHeight, hashBlock))
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to request mainchain block hash!");

    UniValue result(UniValue::VOBJ);
    result.pushKV("blockhash", hashBlock.ToString());

    return result;
}

UniValue verifymainblockcache(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size())
        throw std::runtime_error(
            "verifymainblockcache\n"
            "\nArguments: None\n"
            "\nVerify our cache of mainchain block hashes with the mainchain.\n"
            "\nResult:\n"
            "height  (numeric) Cache verified to this mainchain block height.\n"
        );

    std::string strError = "";
    if (!VerifyMainBlockCache(strError))
        throw JSONRPCError(RPC_MISC_ERROR, strError);

    UniValue result(UniValue::VOBJ);
    result.pushKV("height", bmmCache.GetCachedBlockCount() - 1);

    return result;
}

UniValue updatemainblockcache(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size())
        throw std::runtime_error(
            "updatemainblockcache\n"
            "\nArguments: None\n"
            "\nSync our cache of mainchain block hashes with the mainchain.\n"
            "\nResult:\n"
            "reorg          (true/false)\n"
            "disconnected   (numeric)\n"
            "cached         (numeric)\n"
            "cachesize      (numeric)\n"
        );


    int nCached = bmmCache.GetCachedBlockCount();

    bool fReorg = false;
    std::vector<uint256> vDisconnected;
    if (!UpdateMainBlockHashCache(fReorg, vDisconnected))
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to update!");

    if (fReorg)
        HandleMainchainReorg(vDisconnected);

    int nCachedResult = bmmCache.GetCachedBlockCount();

    UniValue result(UniValue::VOBJ);
    result.pushKV("reorg", fReorg);
    result.pushKV("disconnected", (uint64_t)vDisconnected.size());
    result.pushKV("cached", nCachedResult - nCached);
    result.pushKV("cachesize", nCachedResult);

    return result;
}

UniValue listmywithdrawals(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size())
        throw std::runtime_error(
            "listmywithdrawals\n"
            "\nArguments: None\n"
            "\nList your sidechain withdrawals.\n"
            "\nResult:\n"
            "id             (string)\n"
        );

    std::set<uint256> setID = bmmCache.GetCachedWithdrawalID();

    UniValue result(UniValue::VARR);
    for (const uint256& u : setID) {
        UniValue obj(UniValue::VOBJ);
        obj.pushKV("id", u.ToString());
        result.push_back(obj);
    }

    return result;
}

UniValue rebroadcastwithdrawalbundle(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size())
        throw std::runtime_error(
            "rebroadcastwithdrawalbundle\n"
            "\nSend the latest WithdrawalBundle transaction hex to the local mainchain node.\n"
        );

    SidechainWithdrawalBundle withdrawalBundle;
    uint256 hashLatest;
    psidechaintree->GetLastWithdrawalBundleHash(hashLatest);

    if (hashLatest.IsNull())
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to lookup latest WithdrawalBundle hash!");

    if (!psidechaintree->GetWithdrawalBundle(hashLatest, withdrawalBundle))
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to load latest WithdrawalBundle from database");

    SidechainClient client;
    std::string strHex = EncodeHexTx(withdrawalBundle.tx);
    if (!client.BroadcastWithdrawalBundle(strHex))
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to broadcast latest WithdrawalBundle");

    return NullUniValue;
}

UniValue getwithdrawalbundle(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size())
        throw std::runtime_error(
            "getwithdrawalbundle\n"
            "\nGet the latest WithdrawalBundle transaction hex.\n"
        );

    SidechainWithdrawalBundle withdrawalBundle;
    uint256 hashLatest;
    psidechaintree->GetLastWithdrawalBundleHash(hashLatest);

    if (hashLatest.IsNull())
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to lookup latest WithdrawalBundle hash!");

    if (!psidechaintree->GetWithdrawalBundle(hashLatest, withdrawalBundle))
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to load latest WithdrawalBundle from database");

    return EncodeHexTx(withdrawalBundle.tx);
}

UniValue getwithdrawal(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() != 1)
        throw std::runtime_error(
            "getwithdrawal\n"
            "\nArguments:\n"
            "1. \"id (string, required) the withdrawal ID\"\n"
            "\nGet withdrawal information\n"
        );

    uint256 id = uint256S(request.params[0].get_str());
    if (id.IsNull())
        throw JSONRPCError(RPC_MISC_ERROR, "Invalid ID!");

    SidechainWithdrawal wt;
    if (!psidechaintree->GetWithdrawal(id, wt))
        throw JSONRPCError(RPC_MISC_ERROR, "Withdrawal does not exist!");

    UniValue result(UniValue::VOBJ);
    result.pushKV("destination", wt.strDestination);
    result.pushKV("refunddestination", wt.strRefundDestination);
    result.pushKV("amount", wt.amount);
    result.pushKV("amountmainchainfee",wt.mainchainFee );
    result.pushKV("status", wt.GetStatusStr());
    result.pushKV("hashblindtx", wt.hashBlindTx.ToString());

    return result;
}

UniValue formatdepositaddress(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() != 1)
        throw std::runtime_error(
            "formatdepositaddress \"address\"\n"
            "\nTakes any string and returns a sidechain deposit address\n"
            "Use this command to turn a sidechain receiving address into a deposit address.\n"
            "\nArguments:\n"
            "1. \"address\"      (string, required) The destination to be formatted as a deposit address\n"
            "\nResult:\n"
            "deposit address\n"
            "\nExamples:\n"
            + HelpExampleCli("formatdepositaddress", "\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"")
            + HelpExampleRpc("formatdepositaddress", "\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"")
        );

    std::string strAddress = request.params[0].get_str();
    if (strAddress.empty())
        throw JSONRPCError(RPC_MISC_ERROR, "Input is blank!");


    std::string strDepositAddress = GenerateDepositAddress(strAddress);
    std::string strAddressOut = "";
    unsigned int nSidechainOut;
    if (!ParseDepositAddress(strDepositAddress, strAddressOut, nSidechainOut))
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to verify deposit address!");

    return strDepositAddress;
}

UniValue listbitnames(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size())
        throw std::runtime_error(
            "listbitnames\n"
            "\nList BitNames\n"
            "\nResult:\n"
            "Array of BitNames\n"
            "\nExamples:\n"
            + HelpExampleCli("listbitnames", "")
            + HelpExampleRpc("listbitnames", "")
        );

    std::vector<BitName> vBitName = pbitnametree->GetBitNames();

    UniValue result(UniValue::VARR);
    for (const BitName& b : vBitName) {
        UniValue obj(UniValue::VOBJ);
        obj.pushKV("name_hash", b.name_hash.ToString());
        boost::optional<uint256> commitment = b.commitment.front();
        if (commitment) {
            obj.pushKV("commitment", (*commitment).ToString());
        }
        boost::optional<in_addr_t> opt_in4 = b.in4.front();
        if (opt_in4) {
            struct in_addr in4;
            in4.s_addr = *opt_in4;
            obj.pushKV("ip4_addr", std::string(inet_ntoa(in4)));
        }
        if (b.cpk.front()) {
            CPubKey cpk = *b.cpk.front();
            obj.pushKV("pubkey", HexStr(cpk.begin(), cpk.end()));
        }
        obj.pushKV("txid", b.txid.front().ToString());
        result.push_back(obj);
    }

    return result;
}

boost::optional<BitName> tryresolvebitname(std::string plaintext_bitname) {
    uint256 name_hash;
    const unsigned char* name_ptr =
        reinterpret_cast<const unsigned char*>(plaintext_bitname.c_str());
    CHash256().Write(name_ptr, plaintext_bitname.size())
        .Finalize((unsigned char*) &name_hash);
    BitName bitname;
    boost::optional<BitName> result = boost::none;
    if (pbitnametree->GetBitName(name_hash, bitname)) {
        result = bitname;
    }
    return result;
}

UniValue resolvebitname(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() != 1)
        throw std::runtime_error(
            "resolvebitname\n"
            "\nArguments:\n"
            "1. \"BitName (string, required) the BitName to resolve\"\n"
            "\nResolve BitNames\n"
            "\nResult:\n"
            "BitName data\n"
            "\nExamples:\n"
            + HelpExampleCli("resolvebitname", "")
            + HelpExampleRpc("resolvebitname", "")
        );

    std::string strBitName = request.params[0].get_str();
    if (strBitName.empty())
        throw JSONRPCError(RPC_MISC_ERROR, "Invalid BitName provided");

    uint256 name_hash;
    const unsigned char* name_ptr =
        reinterpret_cast<const unsigned char*>(strBitName.c_str());
    CHash256().Write(name_ptr, strBitName.size())
              .Finalize((unsigned char*) &name_hash);
    BitName bitname;
    if (!pbitnametree->GetBitName(name_hash, bitname)) {
        throw JSONRPCError(RPC_MISC_ERROR, "BitName not found");
    }

    UniValue result(UniValue::VOBJ);
    result.pushKV("name_hash", bitname.name_hash.ToString());
    boost::optional<uint256> commitment = bitname.commitment.front();
        if (commitment) {
            result.pushKV("commitment", (*commitment).ToString());
        }
        boost::optional<in_addr_t> opt_in4 = bitname.in4.front();
        if (opt_in4) {
            struct in_addr in4;
            in4.s_addr = *opt_in4;
            result.pushKV("ip4_addr", std::string(inet_ntoa(in4)));
        }
        if (bitname.cpk.front()) {
            CPubKey cpk = *bitname.cpk.front();
            result.pushKV("pubkey", HexStr(cpk.begin(), cpk.end()));
        }
        result.pushKV("txid", bitname.txid.front().ToString());

    return result;
}

bool is_icann_tld(std::string tld) {
    // version 2023070600
    /*
    curl --silent https://data.iana.org/TLD/tlds-alpha-by-domain.txt \
        | tr '[:upper:]' '[:lower:]' \
        | tail -n +2 \
        | awk '{printf "\"%s\", ", $0} END {print ""}' \
        | fmt -w 72
    */
    std::set<std::string> tlds = {
        "aaa", "aarp", "abb", "abbott", "abbvie", "abc", "able", "abogado",
        "abudhabi", "ac", "academy", "accenture", "accountant", "accountants",
        "aco", "actor", "ad", "ads", "adult", "ae", "aeg", "aero", "aetna",
        "af", "afl", "africa", "ag", "agakhan", "agency", "ai", "aig",
        "airbus", "airforce", "airtel", "akdn", "al", "alibaba", "alipay",
        "allfinanz", "allstate", "ally", "alsace", "alstom", "am", "amazon",
        "americanexpress", "americanfamily", "amex", "amfam", "amica",
        "amsterdam", "analytics", "android", "anquan", "anz", "ao", "aol",
        "apartments", "app", "apple", "aq", "aquarelle", "ar", "arab",
        "aramco", "archi", "army", "arpa", "art", "arte", "as", "asda", "asia",
        "associates", "at", "athleta", "attorney", "au", "auction", "audi",
        "audible", "audio", "auspost", "author", "auto", "autos", "avianca",
        "aw", "aws", "ax", "axa", "az", "azure", "ba", "baby", "baidu",
        "banamex", "bananarepublic", "band", "bank", "bar", "barcelona",
        "barclaycard", "barclays", "barefoot", "bargains", "baseball",
        "basketball", "bauhaus", "bayern", "bb", "bbc", "bbt", "bbva",
        "bcg", "bcn", "bd", "be", "beats", "beauty", "beer", "bentley",
        "berlin", "best", "bestbuy", "bet", "bf", "bg", "bh", "bharti",
        "bi", "bible", "bid", "bike", "bing", "bingo", "bio", "biz", "bj",
        "black", "blackfriday", "blockbuster", "blog", "bloomberg", "blue",
        "bm", "bms", "bmw", "bn", "bnpparibas", "bo", "boats", "boehringer",
        "bofa", "bom", "bond", "boo", "book", "booking", "bosch", "bostik",
        "boston", "bot", "boutique", "box", "br", "bradesco", "bridgestone",
        "broadway", "broker", "brother", "brussels", "bs", "bt", "build",
        "builders", "business", "buy", "buzz", "bv", "bw", "by", "bz", "bzh",
        "ca", "cab", "cafe", "cal", "call", "calvinklein", "cam", "camera",
        "camp", "canon", "capetown", "capital", "capitalone", "car", "caravan",
        "cards", "care", "career", "careers", "cars", "casa", "case", "cash",
        "casino", "cat", "catering", "catholic", "cba", "cbn", "cbre", "cbs",
        "cc", "cd", "center", "ceo", "cern", "cf", "cfa", "cfd", "cg", "ch",
        "chanel", "channel", "charity", "chase", "chat", "cheap", "chintai",
        "christmas", "chrome", "church", "ci", "cipriani", "circle", "cisco",
        "citadel", "citi", "citic", "city", "cityeats", "ck", "cl", "claims",
        "cleaning", "click", "clinic", "clinique", "clothing", "cloud",
        "club", "clubmed", "cm", "cn", "co", "coach", "codes", "coffee",
        "college", "cologne", "com", "comcast", "commbank", "community",
        "company", "compare", "computer", "comsec", "condos", "construction",
        "consulting", "contact", "contractors", "cooking", "cool", "coop",
        "corsica", "country", "coupon", "coupons", "courses", "cpa", "cr",
        "credit", "creditcard", "creditunion", "cricket", "crown", "crs",
        "cruise", "cruises", "cu", "cuisinella", "cv", "cw", "cx", "cy",
        "cymru", "cyou", "cz", "dabur", "dad", "dance", "data", "date",
        "dating", "datsun", "day", "dclk", "dds", "de", "deal", "dealer",
        "deals", "degree", "delivery", "dell", "deloitte", "delta", "democrat",
        "dental", "dentist", "desi", "design", "dev", "dhl", "diamonds",
        "diet", "digital", "direct", "directory", "discount", "discover",
        "dish", "diy", "dj", "dk", "dm", "dnp", "do", "docs", "doctor", "dog",
        "domains", "dot", "download", "drive", "dtv", "dubai", "dunlop",
        "dupont", "durban", "dvag", "dvr", "dz", "earth", "eat", "ec", "eco",
        "edeka", "edu", "education", "ee", "eg", "email", "emerck", "energy",
        "engineer", "engineering", "enterprises", "epson", "equipment", "er",
        "ericsson", "erni", "es", "esq", "estate", "et", "etisalat", "eu",
        "eurovision", "eus", "events", "exchange", "expert", "exposed",
        "express", "extraspace", "fage", "fail", "fairwinds", "faith",
        "family", "fan", "fans", "farm", "farmers", "fashion", "fast", "fedex",
        "feedback", "ferrari", "ferrero", "fi", "fidelity", "fido", "film",
        "final", "finance", "financial", "fire", "firestone", "firmdale",
        "fish", "fishing", "fit", "fitness", "fj", "fk", "flickr", "flights",
        "flir", "florist", "flowers", "fly", "fm", "fo", "foo", "food",
        "football", "ford", "forex", "forsale", "forum", "foundation", "fox",
        "fr", "free", "fresenius", "frl", "frogans", "frontdoor", "frontier",
        "ftr", "fujitsu", "fun", "fund", "furniture", "futbol", "fyi", "ga",
        "gal", "gallery", "gallo", "gallup", "game", "games", "gap", "garden",
        "gay", "gb", "gbiz", "gd", "gdn", "ge", "gea", "gent", "genting",
        "george", "gf", "gg", "ggee", "gh", "gi", "gift", "gifts", "gives",
        "giving", "gl", "glass", "gle", "global", "globo", "gm", "gmail",
        "gmbh", "gmo", "gmx", "gn", "godaddy", "gold", "goldpoint", "golf",
        "goo", "goodyear", "goog", "google", "gop", "got", "gov", "gp", "gq",
        "gr", "grainger", "graphics", "gratis", "green", "gripe", "grocery",
        "group", "gs", "gt", "gu", "guardian", "gucci", "guge", "guide",
        "guitars", "guru", "gw", "gy", "hair", "hamburg", "hangout", "haus",
        "hbo", "hdfc", "hdfcbank", "health", "healthcare", "help", "helsinki",
        "here", "hermes", "hiphop", "hisamitsu", "hitachi", "hiv", "hk",
        "hkt", "hm", "hn", "hockey", "holdings", "holiday", "homedepot",
        "homegoods", "homes", "homesense", "honda", "horse", "hospital",
        "host", "hosting", "hot", "hoteles", "hotels", "hotmail", "house",
        "how", "hr", "hsbc", "ht", "hu", "hughes", "hyatt", "hyundai", "ibm",
        "icbc", "ice", "icu", "id", "ie", "ieee", "ifm", "ikano", "il", "im",
        "imamat", "imdb", "immo", "immobilien", "in", "inc", "industries",
        "infiniti", "info", "ing", "ink", "institute", "insurance", "insure",
        "int", "international", "intuit", "investments", "io", "ipiranga",
        "iq", "ir", "irish", "is", "ismaili", "ist", "istanbul", "it", "itau",
        "itv", "jaguar", "java", "jcb", "je", "jeep", "jetzt", "jewelry",
        "jio", "jll", "jm", "jmp", "jnj", "jo", "jobs", "joburg", "jot",
        "joy", "jp", "jpmorgan", "jprs", "juegos", "juniper", "kaufen",
        "kddi", "ke", "kerryhotels", "kerrylogistics", "kerryproperties",
        "kfh", "kg", "kh", "ki", "kia", "kids", "kim", "kinder", "kindle",
        "kitchen", "kiwi", "km", "kn", "koeln", "komatsu", "kosher", "kp",
        "kpmg", "kpn", "kr", "krd", "kred", "kuokgroup", "kw", "ky", "kyoto",
        "kz", "la", "lacaixa", "lamborghini", "lamer", "lancaster", "land",
        "landrover", "lanxess", "lasalle", "lat", "latino", "latrobe", "law",
        "lawyer", "lb", "lc", "lds", "lease", "leclerc", "lefrak", "legal",
        "lego", "lexus", "lgbt", "li", "lidl", "life", "lifeinsurance",
        "lifestyle", "lighting", "like", "lilly", "limited", "limo", "lincoln",
        "link", "lipsy", "live", "living", "lk", "llc", "llp", "loan", "loans",
        "locker", "locus", "lol", "london", "lotte", "lotto", "love", "lpl",
        "lplfinancial", "lr", "ls", "lt", "ltd", "ltda", "lu", "lundbeck",
        "luxe", "luxury", "lv", "ly", "ma", "madrid", "maif", "maison",
        "makeup", "man", "management", "mango", "map", "market", "marketing",
        "markets", "marriott", "marshalls", "mattel", "mba", "mc", "mckinsey",
        "md", "me", "med", "media", "meet", "melbourne", "meme", "memorial",
        "men", "menu", "merckmsd", "mg", "mh", "miami", "microsoft", "mil",
        "mini", "mint", "mit", "mitsubishi", "mk", "ml", "mlb", "mls",
        "mm", "mma", "mn", "mo", "mobi", "mobile", "moda", "moe", "moi",
        "mom", "monash", "money", "monster", "mormon", "mortgage", "moscow",
        "moto", "motorcycles", "mov", "movie", "mp", "mq", "mr", "ms", "msd",
        "mt", "mtn", "mtr", "mu", "museum", "music", "mutual", "mv", "mw",
        "mx", "my", "mz", "na", "nab", "nagoya", "name", "natura", "navy",
        "nba", "nc", "ne", "nec", "net", "netbank", "netflix", "network",
        "neustar", "new", "news", "next", "nextdirect", "nexus", "nf", "nfl",
        "ng", "ngo", "nhk", "ni", "nico", "nike", "nikon", "ninja", "nissan",
        "nissay", "nl", "no", "nokia", "northwesternmutual", "norton", "now",
        "nowruz", "nowtv", "np", "nr", "nra", "nrw", "ntt", "nu", "nyc", "nz",
        "obi", "observer", "office", "okinawa", "olayan", "olayangroup",
        "oldnavy", "ollo", "om", "omega", "one", "ong", "onl", "online",
        "ooo", "open", "oracle", "orange", "org", "organic", "origins",
        "osaka", "otsuka", "ott", "ovh", "pa", "page", "panasonic", "paris",
        "pars", "partners", "parts", "party", "passagens", "pay", "pccw",
        "pe", "pet", "pf", "pfizer", "pg", "ph", "pharmacy", "phd", "philips",
        "phone", "photo", "photography", "photos", "physio", "pics", "pictet",
        "pictures", "pid", "pin", "ping", "pink", "pioneer", "pizza", "pk",
        "pl", "place", "play", "playstation", "plumbing", "plus", "pm", "pn",
        "pnc", "pohl", "poker", "politie", "porn", "post", "pr", "pramerica",
        "praxi", "press", "prime", "pro", "prod", "productions", "prof",
        "progressive", "promo", "properties", "property", "protection", "pru",
        "prudential", "ps", "pt", "pub", "pw", "pwc", "py", "qa", "qpon",
        "quebec", "quest", "racing", "radio", "re", "read", "realestate",
        "realtor", "realty", "recipes", "red", "redstone", "redumbrella",
        "rehab", "reise", "reisen", "reit", "reliance", "ren", "rent",
        "rentals", "repair", "report", "republican", "rest", "restaurant",
        "review", "reviews", "rexroth", "rich", "richardli", "ricoh", "ril",
        "rio", "rip", "ro", "rocher", "rocks", "rodeo", "rogers", "room",
        "rs", "rsvp", "ru", "rugby", "ruhr", "run", "rw", "rwe", "ryukyu",
        "sa", "saarland", "safe", "safety", "sakura", "sale", "salon",
        "samsclub", "samsung", "sandvik", "sandvikcoromant", "sanofi", "sap",
        "sarl", "sas", "save", "saxo", "sb", "sbi", "sbs", "sc", "sca", "scb",
        "schaeffler", "schmidt", "scholarships", "school", "schule", "schwarz",
        "science", "scot", "sd", "se", "search", "seat", "secure", "security",
        "seek", "select", "sener", "services", "seven", "sew", "sex", "sexy",
        "sfr", "sg", "sh", "shangrila", "sharp", "shaw", "shell", "shia",
        "shiksha", "shoes", "shop", "shopping", "shouji", "show", "showtime",
        "si", "silk", "sina", "singles", "site", "sj", "sk", "ski", "skin",
        "sky", "skype", "sl", "sling", "sm", "smart", "smile", "sn", "sncf",
        "so", "soccer", "social", "softbank", "software", "sohu", "solar",
        "solutions", "song", "sony", "soy", "spa", "space", "sport", "spot",
        "sr", "srl", "ss", "st", "stada", "staples", "star", "statebank",
        "statefarm", "stc", "stcgroup", "stockholm", "storage", "store",
        "stream", "studio", "study", "style", "su", "sucks", "supplies",
        "supply", "support", "surf", "surgery", "suzuki", "sv", "swatch",
        "swiss", "sx", "sy", "sydney", "systems", "sz", "tab", "taipei",
        "talk", "taobao", "target", "tatamotors", "tatar", "tattoo", "tax",
        "taxi", "tc", "tci", "td", "tdk", "team", "tech", "technology", "tel",
        "temasek", "tennis", "teva", "tf", "tg", "th", "thd", "theater",
        "theatre", "tiaa", "tickets", "tienda", "tiffany", "tips", "tires",
        "tirol", "tj", "tjmaxx", "tjx", "tk", "tkmaxx", "tl", "tm", "tmall",
        "tn", "to", "today", "tokyo", "tools", "top", "toray", "toshiba",
        "total", "tours", "town", "toyota", "toys", "tr", "trade", "trading",
        "training", "travel", "travelers", "travelersinsurance", "trust",
        "trv", "tt", "tube", "tui", "tunes", "tushu", "tv", "tvs", "tw", "tz",
        "ua", "ubank", "ubs", "ug", "uk", "unicom", "university", "uno", "uol",
        "ups", "us", "uy", "uz", "va", "vacations", "vana", "vanguard", "vc",
        "ve", "vegas", "ventures", "verisign", "versicherung", "vet", "vg",
        "vi", "viajes", "video", "vig", "viking", "villas", "vin", "vip",
        "virgin", "visa", "vision", "viva", "vivo", "vlaanderen", "vn",
        "vodka", "volkswagen", "volvo", "vote", "voting", "voto", "voyage",
        "vu", "vuelos", "wales", "walmart", "walter", "wang", "wanggou",
        "watch", "watches", "weather", "weatherchannel", "webcam",
        "weber", "website", "wed", "wedding", "weibo", "weir", "wf",
        "whoswho", "wien", "wiki", "williamhill", "win", "windows", "wine",
        "winners", "wme", "wolterskluwer", "woodside", "work", "works",
        "world", "wow", "ws", "wtc", "wtf", "xbox", "xerox", "xfinity",
        "xihuan", "xin", "xn--11b4c3d", "xn--1ck2e1b", "xn--1qqw23a",
        "xn--2scrj9c", "xn--30rr7y", "xn--3bst00m", "xn--3ds443g",
        "xn--3e0b707e", "xn--3hcrj9c", "xn--3pxu8k", "xn--42c2d9a",
        "xn--45br5cyl", "xn--45brj9c", "xn--45q11c", "xn--4dbrk0ce",
        "xn--4gbrim", "xn--54b7fta0cc", "xn--55qw42g", "xn--55qx5d",
        "xn--5su34j936bgsg", "xn--5tzm5g", "xn--6frz82g", "xn--6qq986b3xl",
        "xn--80adxhks", "xn--80ao21a", "xn--80aqecdr1a", "xn--80asehdb",
        "xn--80aswg", "xn--8y0a063a", "xn--90a3ac", "xn--90ae", "xn--90ais",
        "xn--9dbq2a", "xn--9et52u", "xn--9krt00a", "xn--b4w605ferd",
        "xn--bck1b9a5dre4c", "xn--c1avg", "xn--c2br7g", "xn--cck2b3b",
        "xn--cckwcxetd", "xn--cg4bki", "xn--clchc0ea0b2g2a9gcd", "xn--czr694b",
        "xn--czrs0t", "xn--czru2d", "xn--d1acj3b", "xn--d1alf", "xn--e1a4c",
        "xn--eckvdtc9d", "xn--efvy88h", "xn--fct429k", "xn--fhbei",
        "xn--fiq228c5hs", "xn--fiq64b", "xn--fiqs8s", "xn--fiqz9s",
        "xn--fjq720a", "xn--flw351e", "xn--fpcrj9c3d", "xn--fzc2c9e2c",
        "xn--fzys8d69uvgm", "xn--g2xx48c", "xn--gckr3f0f", "xn--gecrj9c",
        "xn--gk3at1e", "xn--h2breg3eve", "xn--h2brj9c", "xn--h2brj9c8c",
        "xn--hxt814e", "xn--i1b6b1a6a2e", "xn--imr513n", "xn--io0a7i",
        "xn--j1aef", "xn--j1amh", "xn--j6w193g", "xn--jlq480n2rg",
        "xn--jvr189m", "xn--kcrx77d1x4a", "xn--kprw13d", "xn--kpry57d",
        "xn--kput3i", "xn--l1acc", "xn--lgbbat1ad8j", "xn--mgb9awbf",
        "xn--mgba3a3ejt", "xn--mgba3a4f16a", "xn--mgba7c0bbn0a",
        "xn--mgbaakc7dvf", "xn--mgbaam7a8h", "xn--mgbab2bd",
        "xn--mgbah1a3hjkrd", "xn--mgbai9azgqp6j", "xn--mgbayh7gpa",
        "xn--mgbbh1a", "xn--mgbbh1a71e", "xn--mgbc0a9azcg", "xn--mgbca7dzdo",
        "xn--mgbcpq6gpa1a", "xn--mgberp4a5d4ar", "xn--mgbgu82a",
        "xn--mgbi4ecexp", "xn--mgbpl2fh", "xn--mgbt3dhd", "xn--mgbtx2b",
        "xn--mgbx4cd0ab", "xn--mix891f", "xn--mk1bu44c", "xn--mxtq1m",
        "xn--ngbc5azd", "xn--ngbe9e0a", "xn--ngbrx", "xn--node", "xn--nqv7f",
        "xn--nqv7fs00ema", "xn--nyqy26a", "xn--o3cw4h", "xn--ogbpf8fl",
        "xn--otu796d", "xn--p1acf", "xn--p1ai", "xn--pgbs0dh", "xn--pssy2u",
        "xn--q7ce6a", "xn--q9jyb4c", "xn--qcka1pmc", "xn--qxa6a", "xn--qxam",
        "xn--rhqv96g", "xn--rovu88b", "xn--rvc1e0am3e", "xn--s9brj9c",
        "xn--ses554g", "xn--t60b56a", "xn--tckwe", "xn--tiq49xqyj",
        "xn--unup4y", "xn--vermgensberater-ctb", "xn--vermgensberatung-pwb",
        "xn--vhquv", "xn--vuq861b", "xn--w4r85el8fhu5dnra", "xn--w4rs40l",
        "xn--wgbh1c", "xn--wgbl6a", "xn--xhq521b", "xn--xkc2al3hye2a",
        "xn--xkc2dl3a5ee0h", "xn--y9a3aq", "xn--yfro4i67o", "xn--ygbi2ammx",
        "xn--zfr164b", "xxx", "xyz", "yachts", "yahoo", "yamaxun", "yandex",
        "ye", "yodobashi", "yoga", "yokohama", "you", "youtube", "yt", "yun",
        "za", "zappos", "zara", "zero", "zip", "zm", "zone", "zuerich", "zw"
    };

    if (tlds.count(tld) > 0) {
        return true;
    } else {
        return false;
    }
}

// look up a fully qualified name via DNS
int dns_lookup(std::string fqdname, in_addr& in4_addr) {
    ares_channel channel;
    int status;
    struct ares_addr_node* node;

    // Initialize c-ares library
    status = ares_library_init(ARES_LIB_INIT_ALL);
    if (status != ARES_SUCCESS) {
        std::cerr << "Failed to initialize c-ares library." << std::endl;
        return status;
    }

    // Create a c-ares channel
    status = ares_init(&channel);
    if (status != ARES_SUCCESS) {
        std::cerr << "Failed to initialize c-ares channel." << std::endl;
        ares_library_cleanup();
        return status;
    }

    // DNS lookup
    ares_gethostbyname(channel, fqdname.c_str(), AF_INET, [](void* arg, int status, int timeouts, struct hostent* hostent) {
        if (status == ARES_SUCCESS && hostent) {
            struct in_addr* ipv4_address = reinterpret_cast<struct in_addr*>(hostent->h_addr_list[0]);
            in_addr* in4_addr = static_cast<in_addr*>(arg);
            *in4_addr = *ipv4_address;
        } else {
            std::cerr << "DNS lookup failed: " << ares_strerror(status) << std::endl;
        }
        ares_cancel(nullptr);
    }, &in4_addr);

     // Wait for DNS response
    fd_set read_fds, write_fds;
    struct timeval tv;
    int nfds = ares_fds(channel, &read_fds, &write_fds);
    while (nfds > 0) {
        tv.tv_sec = 5;
        tv.tv_usec = 0;
        int result = select(nfds, &read_fds, &write_fds, nullptr, &tv);
        if (result > 0) {
            ares_process(channel, &read_fds, &write_fds);
        } else if (result < 0) {
            std::cerr << "Error in select() function." << std::endl;
            break;
        }
        nfds = ares_fds(channel, &read_fds, &write_fds);
    }

    // Clean up
    ares_destroy(channel);
    ares_library_cleanup();

    return ARES_SUCCESS;
}

UniValue resolvefqbitname(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size() != 1)
        throw std::runtime_error(
            "resolvefqbitname\n"
            "\nArguments:\n"
            "1. \"BitName (string, required) the Fully qualified BitName to resolve\"\n"
            "\nResolve Fully Qualified BitNames\n"
            "\nResult:\n"
            "BitName data\n"
            "\nExamples:\n"
            + HelpExampleCli("resolvebitname", "")
            + HelpExampleRpc("resolvebitname", "")
        );

    std::string strFqBitName = request.params[0].get_str();
    // FIXME: make this an option
    bool fDnsResolve = false;

    if (strFqBitName.empty())
        throw JSONRPCError(RPC_MISC_ERROR, "Invalid Fully Qualified BitName provided");
    // FIXME: validation on strFqBitname
    // * check that there are no adjacent label seperators

    std::vector<std::string> labels;
    // labels of subdomains
    std::vector<std::string> sub_labels = std::vector<std::string>();
    boost::split(labels, strFqBitName, boost::is_any_of("."), boost::token_compress_off);

    std::string strBitname;
    UniValue result(UniValue::VOBJ);

    bool icann_tld = is_icann_tld(labels[labels.size() - 1]);
    if (icann_tld && fDnsResolve) {
        // resolve via DNS
    } else {
        if (labels.size() == 1) {
            strBitname = labels[0];
        } else {
            strBitname =
                labels[labels.size() - 2] + "." + labels[labels.size() - 1];
            sub_labels =
                std::vector<std::string>(labels.begin(), labels.end());
            // exclude the last two labels
            sub_labels.pop_back();
            sub_labels.pop_back();
        }
        boost::optional<BitName> bitname = tryresolvebitname(strBitname);
        if (!bitname) {
            throw JSONRPCError(RPC_MISC_ERROR, "BitName not found");
        }
        boost::optional<in_addr_t> opt_in4 = (*bitname).in4.front();

        while (true) {
            if (!opt_in4) {
                throw JSONRPCError(RPC_MISC_ERROR, "Failed to resolve ipv4 addr");
            }
            struct in_addr in4;
            in4.s_addr = *opt_in4;
            if (sub_labels.empty()) {    
                result.pushKV("ip4_addr", std::string(inet_ntoa(in4)));
                break;
            }
            boost::optional<uint256> commitment = (*bitname).commitment.front();
            if (!commitment) {
                throw JSONRPCError(RPC_MISC_ERROR, "Failed to resolve subdomain commitment");
            }
            // FIXME: resolve bitname subdomain
            throw JSONRPCError(RPC_MISC_ERROR, "Cannot resolve bitname subdomain");
        }

        /*
        uint256 name_hash;
        const unsigned char* name_ptr =
            reinterpret_cast<const unsigned char*>(strBitName.c_str());
        CHash256().Write(name_ptr, strBitName.size())
                .Finalize((unsigned char*) &name_hash);
        BitName bitname;
        if (!pbitnametree->GetBitName(name_hash, bitname)) {
            throw JSONRPCError(RPC_MISC_ERROR, "BitName not found");
        }

        result.pushKV("name_hash", bitname.name_hash.ToString());
        boost::optional<uint256> commitment = bitname.commitment.front();
            if (commitment) {
                result.pushKV("commitment", (*commitment).ToString());
            }
            boost::optional<in_addr_t> opt_in4 = bitname.in4.front();
            if (opt_in4) {
                struct in_addr in4;
                in4.s_addr = *opt_in4;
                result.pushKV("ip4_addr", std::string(inet_ntoa(in4)));
            }
            if (bitname.cpk.front()) {
                CPubKey cpk = *bitname.cpk.front();
                result.pushKV("pubkey", HexStr(cpk.begin(), cpk.end()));
            }
            result.pushKV("txid", bitname.txid.front().ToString());
        */
        return result;
    }

    
}

UniValue listbitnamereservations(const JSONRPCRequest& request)
{
    if (request.fHelp || request.params.size())
        throw std::runtime_error(
            "listbitnamereservations\n"
            "\nList BitName Reservations\n"
            "\nResult:\n"
            "Array of BitName Reservations\n"
            "\nExamples:\n"
            + HelpExampleCli("listbitnamereservations", "")
            + HelpExampleRpc("listbitnamereservations", "")
        );

    std::vector<BitNameReservation> vBitnameReservation =
        pbitnamereservationtree->GetBitNameReservations();

    UniValue result(UniValue::VARR);
    for (const BitNameReservation& b : vBitnameReservation) {
        UniValue obj(UniValue::VOBJ);
        obj.pushKV("id", b.nID.ToString());
        obj.pushKV("commitment", b.commitment.ToString());
        obj.pushKV("txid", b.txid.ToString());
        result.push_back(obj);
    }

    return result;
}

UniValue encrypt_memo(const JSONRPCRequest& request) {
    if (request.fHelp || request.params.size() != 2)
        throw std::runtime_error(
            "encryptmemo\n"
            "\nArguments:\n"
            "1. \"pubkey\" (hex, required) the compressed public key to encrypt to\n"
            "2. \"memo\"   (string, required) the plaintext memo to encrypt\n"
            "\nEncrypt memo\n"
            "\nResult:\n"
            "Hex of encrypted memo\n"
            "\nExamples:\n"
            + HelpExampleCli("encryptmemo", "")
            + HelpExampleRpc("encryptmemo", "")
        );

    std::string pubkey_str = request.params[0].get_str();
    if (!IsHex(pubkey_str))
        throw JSONRPCError(RPC_INVALID_PARAMETER, "Pubkey must be hex");
    std::vector<uint8_t> pubkey_bytes = ParseHex(pubkey_str);
    if (pubkey_bytes.size() != CPubKey::COMPRESSED_PUBLIC_KEY_SIZE)
        throw JSONRPCError(RPC_INVALID_PARAMETER, "Invalid public key");
    CPubKey pubkey(pubkey_bytes);
    if (!pubkey.IsFullyValid())
        throw JSONRPCError(RPC_INVALID_PARAMETER, "Invalid public key");
    std::string plaintext = request.params[1].get_str();

    std::vector<uint8_t> ciphertext = encryptmemo(plaintext, pubkey);
    return UniValue(HexStr(ciphertext));
}

UniValue decrypt_memo(const JSONRPCRequest& request) {
    if (request.fHelp || request.params.size() != 2)
        throw std::runtime_error(
            "decryptmemo\n"
            "\nArguments:\n"
            "1. \"secret\"       (hex, required) the secret key to decrypt with\n"
            "2. \"ciphertext\"   (hex, required) the ciphertext to decrypt\n"
            "\nDecrypt memo\n"
            "\nResult:\n"
            "Hex of plaintext\n"
            "\nExamples:\n"
            + HelpExampleCli("decryptmemo", "")
            + HelpExampleRpc("decryptmemo", "")
        );

    std::string secret_str = request.params[0].get_str();
    if (!IsHex(secret_str))
        throw JSONRPCError(RPC_INVALID_PARAMETER, "Secret key must be hex");
    std::vector<uint8_t> secret_bytes = ParseHex(secret_str);
    //CPubKey pubkey(pubkey_bytes);
    CKey secret = CKey();
    if (secret_bytes.size() != 32)
        throw JSONRPCError(RPC_INVALID_PARAMETER, "Invalid secret key length");
    secret.Set(secret_bytes.begin(), secret_bytes.end(), true);
    if (!secret.IsValid())
        throw JSONRPCError(RPC_INVALID_PARAMETER, "Invalid secret key");
    
    // FIXME: remove
    CPubKey pubkey = secret.GetPubKey();
    std::vector<uint8_t> cpk =
        std::vector<uint8_t>(pubkey.begin(), pubkey.end());
    std::string cpk_hex = HexStr(cpk);
    std::cout << "CPK: " << cpk_hex << std::endl;

    std::string ciphertext_str = request.params[1].get_str();
    if (!IsHex(ciphertext_str))
        throw JSONRPCError(RPC_INVALID_PARAMETER, "Ciphertext must be hex");
    std::vector<uint8_t> ciphertext = ParseHex(ciphertext_str);

    boost::optional<std::vector<uint8_t>> plaintext = decryptmemo(ciphertext, secret);
    if (!plaintext)
        throw JSONRPCError(RPC_MISC_ERROR, "Failed to decrypt ciphertext");
    
    return UniValue(HexStr(*plaintext));
}

static const CRPCCommand commands[] =
{ //  category              name                        actor (function)           argNames
  //  --------------------- ------------------------    -----------------------    ----------
    { "control",            "getmemoryinfo",            &getmemoryinfo,            {"mode"} },
    { "control",            "logging",                  &logging,                  {"include", "exclude"}},
    { "util",               "validateaddress",          &validateaddress,          {"address"} }, /* uses wallet if enabled */
    { "util",               "createmultisig",           &createmultisig,           {"nrequired","keys"} },
    { "util",               "verifymessage",            &verifymessage,            {"address","signature","message"} },
    { "util",               "signmessagewithprivkey",   &signmessagewithprivkey,   {"privkey","message"} },

    /* Not shown in help */
    { "hidden",             "setmocktime",              &setmocktime,              {"timestamp"}},
    { "hidden",             "echo",                     &echo,                     {"arg0","arg1","arg2","arg3","arg4","arg5","arg6","arg7","arg8","arg9"}},
    { "hidden",             "echojson",                 &echo,                     {"arg0","arg1","arg2","arg3","arg4","arg5","arg6","arg7","arg8","arg9"}},
    { "hidden",             "getinfo",                  &getinfo_deprecated,       {}},

    /* Sidechain RPC functions */
    { "sidechain",          "refreshbmm",                   &refreshbmm,                    {"amount", "createnew", "prevblock"}},
    { "sidechain",          "getaveragemainchainfees",      &getaveragemainchainfees,       {"blockcount", "startheight"}},
    { "sidechain",          "getmainchainblockcount",       &getmainchainblockcount,        {}},
    { "sidechain",          "getmainchainblockhash",        &getmainchainblockhash,         {"height"}},
    { "sidechain",          "getwithdrawalbundle",          &getwithdrawalbundle,           {}},
    { "sidechain",          "verifymainblockcache",         &verifymainblockcache,          {}},
    { "sidechain",          "updatemainblockcache",         &updatemainblockcache,          {}},
    { "sidechain",          "listmywithdrawals",            &listmywithdrawals,             {}},
    { "sidechain",          "rebroadcastwithdrawalbundle",  &rebroadcastwithdrawalbundle,   {}},
    { "sidechain",          "getwithdrawal",                &getwithdrawal,                 {"id"}},
    { "sidechain",          "formatdepositaddress",         &formatdepositaddress,          {"address"}},

    /* BitNames */
    { "BitNames",          "listbitnames",                  &listbitnames,                  {}},
    { "BitNames",          "resolvebitname",                &resolvebitname,                {"bitname"}},
    { "BitNames",          "resolvefqbitname",              &resolvefqbitname,              {"fqbitname"}},
    { "BitNames",          "listbitnamereservations",       &listbitnamereservations,       {}},
    { "BitNames",          "encryptmemo",                   &encrypt_memo,                  {"pubkey", "memo"}},
    { "BitNames",          "decryptmemo",                   &decrypt_memo,                  {"secret", "ciphertext"}}
};

void RegisterMiscRPCCommands(CRPCTable &t)
{
    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)
        t.appendCommand(commands[vcidx].name, &commands[vcidx]);
}
